import cv2 #th∆∞ vi·ªán x·ª≠ l√Ω h√¨nh ·∫£nh v√† video trong Python. N√≥ cung c·∫•p c√°c ch·ª©c nƒÉng ƒë·ªÉ ƒë·ªçc, ghi v√† x·ª≠ l√Ω c√°c h√¨nh ·∫£nh t·ª´ c√°c ngu·ªìn ƒë·∫ßu v√†o kh√°c nhau
import os
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.models import load_model
import numpy as np
import cvlib #m·ªôt th∆∞ vi·ªán x·ª≠ l√Ω h√¨nh ·∫£nh d·ª±a tr√™n OpenCV, cung c·∫•p c√°c c√¥ng c·ª• gi√∫p ph√°t hi·ªán khu√¥n m·∫∑t, ƒë·ªìng th·ªùi cung c·∫•p ch·ª©c nƒÉng nh·∫≠n bi·∫øt gi·ªõi t√≠nh v√† c·∫£m x√∫c t·ª´ khu√¥n m·∫∑t
import tkinter as tk
from tkinter import *
from PIL import ImageTk, Image
from tkinter import messagebox
import threading
import requests
import json
from datetime import datetime
import webbrowser
import urllib.parse
import io
import pygame

# Load model
# face_classifier = cv2.CascadeClassifier('face_detection.xml')
gender_model = load_model('Gender1.h5')
emotion_model = load_model('Emotion1.h5')

gender_labels = ['Male', 'Female']
emotion_labels = ['Neutral', 'Happy', 'Sad', 'Surprised', 'Angry']

# Emoji mapping cho c·∫£m x√∫c
emotion_emojis = {
    'Neutral': 'üòê',
    'Happy': 'üòä',
    'Sad': 'üò¢',
    'Surprised': 'üò≤',
    'Angry': 'üò†'
}



# C·∫•u h√¨nh Telegram Bot (b·∫°n c·∫ßn t·∫°o bot v√† l·∫•y token)
TELEGRAM_BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # Thay b·∫±ng token th·∫≠t
TELEGRAM_CHAT_ID = "YOUR_CHAT_ID_HERE"     # Thay b·∫±ng chat ID th·∫≠t

# Bi·∫øn l∆∞u tr·ªØ frame cu·ªëi c√πng ƒë·ªÉ l∆∞u ·∫£nh
last_frame = None
last_gender = ""
last_emotion = ""


# ÔøΩÔ∏è GAME ƒêUA XE ƒêI·ªÄU KHI·ªÇN B·∫∞NG C·∫¢M X√öC
game_active = False
avatar_emotion = "Neutral"
avatar_animation_frame = 0
last_emotion_change = 0
emotion_intensity = 0  # ƒê·ªô m·∫°nh c·ªßa c·∫£m x√∫c (0-100)
avatar_x = 110  # V·ªã tr√≠ x c·ªßa nh√¢n v·∫≠t
avatar_y = 200  # V·ªã tr√≠ y c·ªßa nh√¢n v·∫≠t
animation_speed = 0.2
emotion_colors = {
    'Happy': '#FFD700',    # V√†ng
    'Sad': '#4169E1',      # Xanh d∆∞∆°ng
    'Angry': '#FF4500',    # ƒê·ªè cam
    'Surprised': '#FF69B4', # H·ªìng
    'Neutral': '#808080'    # X√°m
}

# Create tkinter window
root = tk.Tk()
root.geometry('1200x700')
root.resizable(False, False)
root.title('AI Face Detection System - Professional Edition')
root.configure(bg='#1a1a2e')

# Load and set window icon
try:
    icon_image = Image.open('Huit.png')
    icon_image = icon_image.resize((32, 32), Image.LANCZOS)
    icon = ImageTk.PhotoImage(icon_image)
    root.iconphoto(True, icon)
except:
    pass


is_running = False

# ===== C√ÅC H√ÄM G·ª¨I TIN NH·∫ÆN =====

def send_telegram_message(message):
    """G·ª≠i tin nh·∫Øn qua Telegram Bot"""
    try:
        if TELEGRAM_BOT_TOKEN != "YOUR_BOT_TOKEN_HERE":
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            data = {
                "chat_id": TELEGRAM_CHAT_ID,
                "text": message,
                "parse_mode": "HTML"
            }
            response = requests.post(url, data=data, timeout=5)
            if response.status_code == 200:
                print("‚úÖ Telegram message sent successfully!")
            else:
                print("‚ùå Failed to send Telegram message")
    except Exception as e:
        print(f"‚ùå Telegram error: {e}")

def send_whatsapp_message(message):
    """M·ªü WhatsApp Web v·ªõi tin nh·∫Øn ƒë√£ so·∫°n s·∫µn"""
    try:
        # Encode message cho URL
        encoded_message = urllib.parse.quote(message)
        whatsapp_url = f"https://web.whatsapp.com/send?text={encoded_message}"
        webbrowser.open(whatsapp_url)
        print("‚úÖ WhatsApp opened with message!")
    except Exception as e:
        print(f"‚ùå WhatsApp error: {e}")





# ===== GAME T√çCH ƒêI·ªÇM C·∫¢M X√öC =====

def start_avatar_game():
    """B·∫Øt ƒë·∫ßu game nh√¢n v·∫≠t c·∫£m x√∫c"""
    global game_active, avatar_emotion, last_emotion_change, emotion_intensity

    if not is_running:
        messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", "Vui l√≤ng b·∫•m START camera tr∆∞·ªõc khi ch∆°i game!")
        return

    game_active = True
    avatar_emotion = "Neutral"
    last_emotion_change = datetime.now().timestamp()
    emotion_intensity = 0

    # C·∫≠p nh·∫≠t UI
    game_button.config(text="ÔøΩ ƒêANG CH∆†I...", state="disabled", bg="#95a5a6")
    update_avatar_display()

    print(f"ÔøΩ Game nh√¢n v·∫≠t b·∫Øt ƒë·∫ßu!")
    print(f"‚ú® Th·ªÉ hi·ªán c·∫£m x√∫c ƒë·ªÉ ƒëi·ªÅu khi·ªÉn nh√¢n v·∫≠t!")

def stop_avatar_game():
    """D·ª´ng game nh√¢n v·∫≠t c·∫£m x√∫c"""
    global game_active

    game_active = False
    game_button.config(text="ÔøΩ AVATAR", state="normal", bg="#e67e22")

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    result_message = f"""
ÔøΩ GAME NH√ÇN V·∫¨T C·∫¢M X√öC K·∫æT TH√öC

‚ú® C·∫£m ∆°n b·∫°n ƒë√£ ch∆°i!
üé≠ Nh√¢n v·∫≠t ƒë√£ ph·∫£n ·ª©ng theo c·∫£m x√∫c c·ªßa b·∫°n
üòä H√£y th·ª≠ l·∫°i ƒë·ªÉ xem nh·ªØng ph·∫£n ·ª©ng kh√°c!
    """

    messagebox.showinfo("ÔøΩ K·∫øt th√∫c Game", result_message)

    # Reset hi·ªÉn th·ªã
    game_info_label.config(text="ÔøΩ B·∫•m AVATAR ƒë·ªÉ b·∫Øt ƒë·∫ßu ch∆°i!")

def get_rank_by_score(score):
    """X·∫øp h·∫°ng theo ƒëi·ªÉm s·ªë"""
    if score >= 90:
        return "ü•á MASTER - B·∫≠c th·∫ßy c·∫£m x√∫c!"
    elif score >= 70:
        return "ü•à EXPERT - Chuy√™n gia!"
    elif score >= 50:
        return "ü•â GOOD - Kh√° t·ªët!"
    elif score >= 30:
        return "üìà BEGINNER - M·ªõi b·∫Øt ƒë·∫ßu"
    else:
        return "üòÖ PRACTICE MORE - Luy·ªán t·∫≠p th√™m nh√©!"

def update_avatar_emotion(detected_emotion):
    """C·∫≠p nh·∫≠t c·∫£m x√∫c c·ªßa nh√¢n v·∫≠t"""
    global avatar_emotion, last_emotion_change, emotion_intensity

    if not game_active:
        return

    current_time = datetime.now().timestamp()

    # C·∫≠p nh·∫≠t c·∫£m x√∫c nh√¢n v·∫≠t
    if detected_emotion != avatar_emotion:
        avatar_emotion = detected_emotion
        last_emotion_change = current_time
        emotion_intensity = 100  # C·∫£m x√∫c m·∫°nh khi m·ªõi thay ƒë·ªïi
        print(f"üé≠ Nh√¢n v·∫≠t thay ƒë·ªïi c·∫£m x√∫c: {avatar_emotion} {emotion_emojis.get(avatar_emotion, 'üòê')}")

    # Gi·∫£m d·∫ßn c∆∞·ªùng ƒë·ªô c·∫£m x√∫c theo th·ªùi gian
    time_since_change = current_time - last_emotion_change
    emotion_intensity = max(20, 100 - (time_since_change * 20))  # Gi·∫£m 20 m·ªói gi√¢y, t·ªëi thi·ªÉu 20

    # C·∫≠p nh·∫≠t hi·ªÉn th·ªã
    update_avatar_display()

def update_avatar_display():
    """C·∫≠p nh·∫≠t hi·ªÉn th·ªã nh√¢n v·∫≠t v√† th√¥ng tin"""
    if not game_active:
        return

    # T·∫°o m√¥ t·∫£ tr·∫°ng th√°i nh√¢n v·∫≠t
    emotion_desc = get_avatar_description(avatar_emotion, emotion_intensity)

    game_text = f"""üé≠ NH√ÇN V·∫¨T C·∫¢M X√öC

üòä C·∫£m x√∫c hi·ªán t·∫°i: {avatar_emotion} {emotion_emojis.get(avatar_emotion, 'üòê')}
üí™ C∆∞·ªùng ƒë·ªô: {emotion_intensity:.0f}%

{emotion_desc}

‚ú® Th·ªÉ hi·ªán c·∫£m x√∫c kh√°c ƒë·ªÉ thay ƒë·ªïi nh√¢n v·∫≠t!"""

    game_info_label.config(text=game_text)

    # V·∫Ω nh√¢n v·∫≠t ho·∫°t h√¨nh tr√™n canvas
    draw_animated_avatar()

def draw_animated_avatar():
    """V·∫Ω nh√¢n v·∫≠t ho·∫°t h√¨nh tr√™n canvas"""
    global avatar_animation_frame

    # X√≥a canvas
    avatar_canvas.delete("all")

    # L·∫•y m√†u theo c·∫£m x√∫c
    color = emotion_colors.get(avatar_emotion, '#808080')

    # T√≠nh to√°n animation frame
    avatar_animation_frame += animation_speed
    if avatar_animation_frame > 2 * 3.14159:  # 2œÄ
        avatar_animation_frame = 0

    # V·ªã tr√≠ trung t√¢m trong canvas
    center_x = 110
    center_y = 100

    # V·∫Ω nh√¢n v·∫≠t theo c·∫£m x√∫c
    if avatar_emotion == 'Happy':
        draw_happy_avatar(center_x, center_y, color)
    elif avatar_emotion == 'Sad':
        draw_sad_avatar(center_x, center_y, color)
    elif avatar_emotion == 'Angry':
        draw_angry_avatar(center_x, center_y, color)
    elif avatar_emotion == 'Surprised':
        draw_surprised_avatar(center_x, center_y, color)
    else:  # Neutral
        draw_neutral_avatar(center_x, center_y, color)

    # L·∫∑p l·∫°i animation
    if game_active:
        root.after(50, draw_animated_avatar)  # 20 FPS

def draw_happy_avatar(x, y, color):
    """V·∫Ω nh√¢n v·∫≠t vui v·∫ª - nh·∫£y m√∫a"""
    import math

    # Nh·∫£y l√™n xu·ªëng
    bounce = math.sin(avatar_animation_frame * 4) * 10
    y_pos = y + bounce

    # Th√¢n ng∆∞·ªùi (h√¨nh oval)
    avatar_canvas.create_oval(x-30, y_pos-40, x+30, y_pos+40,
                             fill=color, outline='black', width=2)

    # ƒê·∫ßu (h√¨nh tr√≤n)
    avatar_canvas.create_oval(x-20, y_pos-70, x+20, y_pos-30,
                             fill='#FFDBAC', outline='black', width=2)

    # M·∫Øt vui (h√¨nh cung)
    avatar_canvas.create_arc(x-15, y_pos-60, x-5, y_pos-50,
                            start=0, extent=180, fill='black')
    avatar_canvas.create_arc(x+5, y_pos-60, x+15, y_pos-50,
                            start=0, extent=180, fill='black')

    # Mi·ªáng c∆∞·ªùi
    avatar_canvas.create_arc(x-10, y_pos-50, x+10, y_pos-40,
                            start=0, extent=-180, outline='red', width=3)

    # Tay v·∫´y (chuy·ªÉn ƒë·ªông)
    arm_angle = math.sin(avatar_animation_frame * 6) * 30
    arm_x = x + 35 + math.cos(math.radians(arm_angle)) * 15
    arm_y = y_pos - 10 + math.sin(math.radians(arm_angle)) * 15

    avatar_canvas.create_line(x+30, y_pos-10, arm_x, arm_y,
                             fill='black', width=4)
    avatar_canvas.create_oval(arm_x-5, arm_y-5, arm_x+5, arm_y+5,
                             fill='#FFDBAC', outline='black')

def draw_sad_avatar(x, y, color):
    """V·∫Ω nh√¢n v·∫≠t bu·ªìn - c√∫i ƒë·∫ßu"""
    # Th√¢n ng∆∞·ªùi
    avatar_canvas.create_oval(x-30, y-40, x+30, y+40,
                             fill=color, outline='black', width=2)

    # ƒê·∫ßu c√∫i xu·ªëng
    head_y = y - 45
    avatar_canvas.create_oval(x-20, head_y-25, x+20, head_y+15,
                             fill='#FFDBAC', outline='black', width=2)

    # M·∫Øt bu·ªìn (ƒë∆∞·ªùng th·∫≥ng)
    avatar_canvas.create_line(x-15, head_y-10, x-5, head_y-5,
                             fill='black', width=2)
    avatar_canvas.create_line(x+5, head_y-10, x+15, head_y-5,
                             fill='black', width=2)

    # Mi·ªáng bu·ªìn
    avatar_canvas.create_arc(x-8, head_y, x+8, head_y+10,
                            start=0, extent=180, outline='blue', width=3)

    # N∆∞·ªõc m·∫Øt
    avatar_canvas.create_oval(x-18, head_y-5, x-16, head_y+5,
                             fill='lightblue', outline='blue')
    avatar_canvas.create_oval(x+16, head_y-5, x+18, head_y+5,
                             fill='lightblue', outline='blue')

def draw_angry_avatar(x, y, color):
    """V·∫Ω nh√¢n v·∫≠t t·ª©c gi·∫≠n - rung l·∫Øc"""
    import math

    # Rung l·∫Øc
    shake = math.sin(avatar_animation_frame * 10) * 3
    x_pos = x + shake

    # Th√¢n ng∆∞·ªùi (ƒë·ªè)
    avatar_canvas.create_oval(x_pos-30, y-40, x_pos+30, y+40,
                             fill='#FF4500', outline='darkred', width=3)

    # ƒê·∫ßu
    avatar_canvas.create_oval(x_pos-20, y-70, x_pos+20, y-30,
                             fill='#FFDBAC', outline='darkred', width=2)

    # M·∫Øt gi·∫≠n (ch·ªØ X)
    avatar_canvas.create_line(x_pos-15, y-60, x_pos-5, y-50,
                             fill='red', width=3)
    avatar_canvas.create_line(x_pos-15, y-50, x_pos-5, y-60,
                             fill='red', width=3)
    avatar_canvas.create_line(x_pos+5, y-60, x_pos+15, y-50,
                             fill='red', width=3)
    avatar_canvas.create_line(x_pos+5, y-50, x_pos+15, y-60,
                             fill='red', width=3)

    # Mi·ªáng gi·∫≠n
    avatar_canvas.create_arc(x_pos-8, y-45, x_pos+8, y-35,
                            start=0, extent=180, outline='darkred', width=3)

    # Kh√≥i t·ª´ ƒë·∫ßu
    for i in range(3):
        smoke_y = y - 80 - i*10
        avatar_canvas.create_oval(x_pos-5+i*2, smoke_y-5, x_pos+5+i*2, smoke_y+5,
                                 fill='gray', outline='darkgray')

def draw_surprised_avatar(x, y, color):
    """V·∫Ω nh√¢n v·∫≠t ng·∫°c nhi√™n - gi·∫≠t m√¨nh"""
    import math

    # Gi·∫≠t m√¨nh (scale l·ªõn h∆°n)
    scale = 1 + math.sin(avatar_animation_frame * 8) * 0.1

    # Th√¢n ng∆∞·ªùi
    avatar_canvas.create_oval(x-30*scale, y-40*scale, x+30*scale, y+40*scale,
                             fill=color, outline='black', width=2)

    # ƒê·∫ßu
    avatar_canvas.create_oval(x-20*scale, y-70*scale, x+20*scale, y-30*scale,
                             fill='#FFDBAC', outline='black', width=2)

    # M·∫Øt to (h√¨nh tr√≤n)
    avatar_canvas.create_oval(x-18, y-65, x-8, y-55,
                             fill='white', outline='black', width=2)
    avatar_canvas.create_oval(x+8, y-65, x+18, y-55,
                             fill='white', outline='black', width=2)
    avatar_canvas.create_oval(x-15, y-62, x-11, y-58, fill='black')
    avatar_canvas.create_oval(x+11, y-62, x+15, y-58, fill='black')

    # Mi·ªáng h√° h·ªëc
    avatar_canvas.create_oval(x-6, y-48, x+6, y-42,
                             fill='black', outline='black')

    # D·∫•u ch·∫•m than
    avatar_canvas.create_text(x+35, y-80, text="!",
                             font=('Arial', 20, 'bold'), fill='red')

def draw_neutral_avatar(x, y, color):
    """V·∫Ω nh√¢n v·∫≠t b√¨nh th∆∞·ªùng"""
    # Th√¢n ng∆∞·ªùi
    avatar_canvas.create_oval(x-30, y-40, x+30, y+40,
                             fill=color, outline='black', width=2)

    # ƒê·∫ßu
    avatar_canvas.create_oval(x-20, y-70, x+20, y-30,
                             fill='#FFDBAC', outline='black', width=2)

    # M·∫Øt b√¨nh th∆∞·ªùng
    avatar_canvas.create_oval(x-15, y-60, x-10, y-55, fill='black')
    avatar_canvas.create_oval(x+10, y-60, x+15, y-55, fill='black')

    # Mi·ªáng th·∫≥ng
    avatar_canvas.create_line(x-8, y-45, x+8, y-45,
                             fill='black', width=2)

def get_avatar_description(emotion, intensity):
    """M√¥ t·∫£ tr·∫°ng th√°i nh√¢n v·∫≠t theo c·∫£m x√∫c"""
    descriptions = {
        'Happy': [
            "üéâ Nh√¢n v·∫≠t ƒëang nh·∫£y m√∫a vui v·∫ª!",
            "üòÑ M·∫∑t r·∫°ng r·ª°, tay v·∫´y ch√†o!",
            "üåü √Ånh m·∫Øt s√°ng ng·ªùi h·∫°nh ph√∫c!"
        ],
        'Sad': [
            "üò¢ Nh√¢n v·∫≠t c√∫i ƒë·∫ßu bu·ªìn b√£...",
            "üíß N∆∞·ªõc m·∫Øt r∆°i, vai run r·∫©y...",
            "üåßÔ∏è B·∫ßu kh√¥ng kh√≠ u √°m quanh nh√¢n v·∫≠t..."
        ],
        'Angry': [
            "üò° Nh√¢n v·∫≠t n·ªïi gi·∫≠n, m·∫∑t ƒë·ªè gay!",
            "üî• Tay n·∫Øm ch·∫∑t, ch√¢n d·∫≠m m·∫°nh!",
            "‚ö° Kh√≥i b·ªëc l√™n t·ª´ ƒë·∫ßu nh√¢n v·∫≠t!"
        ],
        'Surprised': [
            "üò≤ Nh√¢n v·∫≠t gi·∫≠t m√¨nh, m·∫Øt m·ªü to!",
            "‚ùó Mi·ªáng h√° h·ªëc, tay che mi·ªáng!",
            "‚ú® √Ånh m·∫Øt ng·∫°c nhi√™n th√∫ v·ªã!"
        ],
        'Neutral': [
            "üòê Nh√¢n v·∫≠t ƒë·ª©ng b√¨nh th∆∞·ªùng...",
            "ü§î Bi·ªÉu c·∫£m trung t√≠nh, th∆∞ gi√£n...",
            "üí≠ ƒêang ch·ªù ƒë·ª£i c·∫£m x√∫c m·ªõi..."
        ]
    }

    emotion_list = descriptions.get(emotion, descriptions['Neutral'])

    # Ch·ªçn m√¥ t·∫£ d·ª±a tr√™n c∆∞·ªùng ƒë·ªô
    if intensity > 80:
        return emotion_list[0]  # M√¥ t·∫£ m·∫°nh nh·∫•t
    elif intensity > 50:
        return emotion_list[1]  # M√¥ t·∫£ trung b√¨nh
    else:
        return emotion_list[2]  # M√¥ t·∫£ nh·∫π nh·∫•t



def save_detection_image(frame, gender, emotion):
    """L∆∞u ·∫£nh v√† copy v√†o clipboard"""
    try:
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
        if not os.path.exists("saved_images"):
            os.makedirs("saved_images")

        # T·∫°o t√™n file v·ªõi th·ªùi gian v√† k·∫øt qu·∫£
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"saved_images/detection_{timestamp}_{gender}_{emotion}.jpg"

        # L∆∞u ·∫£nh v√†o file
        cv2.imwrite(filename, frame)
        print(f"üì∏ ƒê√£ l∆∞u ·∫£nh: {filename}")

        # üìã COPY ·∫¢NH V√ÄO CLIPBOARD (Windows)
        try:
            # Chuy·ªÉn ƒë·ªïi t·ª´ BGR (OpenCV) sang RGB (PIL)
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            pil_image = Image.fromarray(frame_rgb)

            # T·∫°o file t·∫°m ƒë·ªÉ copy
            temp_path = f"temp_clipboard_{timestamp}.png"
            pil_image.save(temp_path, format='PNG')

            # S·ª≠ d·ª•ng Windows command ƒë·ªÉ copy ·∫£nh v√†o clipboard
            import subprocess
            try:
                # PowerShell command ƒë·ªÉ copy ·∫£nh v√†o clipboard
                ps_command = f'Add-Type -AssemblyName System.Windows.Forms; [System.Windows.Forms.Clipboard]::SetImage([System.Drawing.Image]::FromFile("{os.path.abspath(temp_path)}"))'
                subprocess.run(['powershell', '-Command', ps_command], check=True, capture_output=True)
                print("üìã ·∫¢nh ƒë√£ ƒë∆∞·ª£c copy v√†o clipboard!")

                # X√≥a file t·∫°m sau 3 gi√¢y
                def cleanup_temp():
                    try:
                        import time
                        time.sleep(3)
                        if os.path.exists(temp_path):
                            os.remove(temp_path)
                    except:
                        pass

                threading.Thread(target=cleanup_temp, daemon=True).start()

            except subprocess.CalledProcessError:
                print("‚ö†Ô∏è Kh√¥ng th·ªÉ copy v√†o clipboard b·∫±ng PowerShell")
                # Fallback: Ch·ªâ th√¥ng b√°o file ƒë√£ l∆∞u

        except Exception as clipboard_error:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ copy v√†o clipboard: {clipboard_error}")

        return filename
    except Exception as e:
        print(f"‚ùå L·ªói l∆∞u ·∫£nh: {e}")
        return None

def use_camera():
    global is_running
    is_running = True
    start_button.config(state="disabled")
    stop_button.config(state="normal")
    exit_button.config(state="normal")

    worker_thread = threading.Thread(target=camera_worker)
    worker_thread.start()
    
def quit_program():
    answer = messagebox.askyesno("Quit", "Do you want to exit?")
    if answer:
        root.destroy()

def cancel_feed():
    global is_running, last_frame, last_gender, last_emotion
    is_running = False
    start_button.config(state="normal")
    stop_button.config(state="disabled")

    # üì∏ T·ª∞ ƒê·ªòNG L∆ØU ·∫¢NH KHI STOP
    if last_frame is not None and last_gender and last_emotion:
        filename = save_detection_image(last_frame, last_gender, last_emotion)
        if filename:
            messagebox.showinfo("üì∏ ƒê√£ l∆∞u ·∫£nh!",
                               f"‚úÖ ·∫¢nh ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!\n\n"
                               f"üìÅ File: {filename}\n"
                               f"üë§ Gi·ªõi t√≠nh: {last_gender}\n"
                               f"üòä C·∫£m x√∫c: {last_emotion}\n\n"
                               f"ÔøΩ ·∫¢nh ƒë√£ copy v√†o clipboard!\n"
                               f"üí¨ M·ªü ·ª©ng d·ª•ng chat ‚Üí Ctrl+V ƒë·ªÉ g·ª≠i ·∫£nh!\n\n"
                               f"ÔøΩüìÇ Xem trong th∆∞ m·ª•c 'saved_images'")
        else:
            messagebox.showwarning("‚ö†Ô∏è L·ªói", "Kh√¥ng th·ªÉ l∆∞u ·∫£nh!")
    else:
        messagebox.showinfo("‚ÑπÔ∏è Th√¥ng b√°o", "Ch∆∞a ph√°t hi·ªán khu√¥n m·∫∑t n√†o ƒë·ªÉ l∆∞u!")

def camera_worker():
    global last_frame, last_gender, last_emotion
    capture = cv2.VideoCapture(0)

    while is_running:
        ret, frame = capture.read()

        # Face detection
        faces, confidences = cvlib.detect_face(frame)

        for face, confidence in zip(faces, confidences):
            # Get the coordinates of the face rectangle
            (startX, startY) = face[0], face[1]
            (endX, endY) = face[2], face[3]

            # Draw rectangle around the face
            cv2.rectangle(frame, (startX, startY), (endX, endY), (0, 0, 255), 2) #BGR

            # Crop the detected face region
            face_crop = np.copy(frame[startY:endY, startX:endX])

            if face_crop.shape[0] < 10 or face_crop.shape[1] < 10:
                continue

            # Preprocess the face for gender prediction
            face_crop = cv2.resize(face_crop, (150, 150))
            face_crop = face_crop.astype("float") / 255.0
            face_crop = img_to_array(face_crop)
            face_crop = np.expand_dims(face_crop, axis=0)

            # Predict gender
            conf_model_gender = gender_model.predict(face_crop)[0]
            idx_model_gender = np.argmax(conf_model_gender)
            label_model_gender = gender_labels[idx_model_gender]

            # Predict emotion
            conf_model_emotion = emotion_model.predict(face_crop)[0]
            idx_model_emotion = np.argmax(conf_model_emotion)
            label_model_emotion = emotion_labels[idx_model_emotion]

            label = "{},{}".format(label_model_gender, label_model_emotion)

            Y = startY - 10 if startY - 10 > 10 else startY + 10

            # Write the predicted gender label on the image
            cv2.putText(frame, label, (startX, Y), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 0), 2)

            # ÔøΩ L∆ØU FRAME CU·ªêI C√ôNG ƒê·ªÇ IN ·∫¢NH KHI STOP
            last_frame = frame.copy()
            last_gender = label_model_gender
            last_emotion = label_model_emotion

            # ÔøΩ C·∫¨P NH·∫¨T NH√ÇN V·∫¨T C·∫¢M X√öC
            if game_active:
                update_avatar_emotion(label_model_emotion)

            # Kh√¥ng t·ª± ƒë·ªông ph√°t nh·∫°c n·ªØa - ch·ªâ ph√°t khi b·∫•m n√∫t

        # Convert the image from OpenCV BGR format to PIL Image
        image = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
        image = image.resize((640, 480), Image.LANCZOS)

        # Convert the PIL Image to ImageTk to display on Tkinter label
        imgtk = ImageTk.PhotoImage(image=image)

        # Update the image on the label
        image_label.configure(image=imgtk)
        image_label.image = imgtk

        if cv2.waitKey(1) & 0xFF == ord('s'):
            break

    capture.release()
    cv2.destroyAllWindows()

# Main frame v·ªõi gradient background
main_frame = tk.Frame(root, bg='#1a1a2e')
main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

# Header frame v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i
header_frame = tk.Frame(main_frame, bg='#16213e', relief=tk.RAISED, bd=2)
header_frame.pack(fill=tk.X, pady=(0, 20))

# Logo v√† title container
logo_title_frame = tk.Frame(header_frame, bg='#16213e')
logo_title_frame.pack(fill=tk.X, padx=20, pady=15)

# Load and display HUIT logo v·ªõi vi·ªÅn ƒë·∫πp
try:
    logo_image = Image.open('Huit.png')
    logo_image = logo_image.resize((70, 70), Image.LANCZOS)
    logo_photo = ImageTk.PhotoImage(logo_image)

    logo_container = tk.Frame(logo_title_frame, bg='#0f3460', relief=tk.RAISED, bd=3)
    logo_container.pack(side=tk.LEFT, padx=(0, 20))

    logo_label = tk.Label(logo_container, image=logo_photo, bg='#0f3460')
    logo_label.image = logo_photo  # Keep a reference
    logo_label.pack(padx=5, pady=5)
except:
    pass

# Titles frame v·ªõi typography ƒë·∫πp
titles_frame = tk.Frame(logo_title_frame, bg='#16213e')
titles_frame.pack(side=tk.LEFT, expand=True, fill=tk.X)

# Title 1 - Main title
label_title = tk.Label(titles_frame,
                       text='AI FACE DETECTION SYSTEM',
                       font=("Segoe UI", 24, "bold"),
                       fg="#00d4ff",
                       bg='#16213e')
label_title.pack(anchor='w', pady=(0, 5))

# Title 2 - Subtitle
label_title2 = tk.Label(titles_frame,
                        text='Gender & Emotion Recognition | Professional Edition',
                        font=("Segoe UI", 12),
                        fg="#a8b2d1",
                        bg='#16213e')
label_title2.pack(anchor='w', pady=(0, 5))

# Title 3 - Team info
label_title3 = tk.Label(titles_frame,
                        text='NH√ìM 5 - L√ÄNG X√å TRUM | Ho Chi Minh City University of Industry and Trade',
                        font=("Segoe UI", 10, "bold"),
                        fg="#ff6b6b",
                        bg='#16213e')
label_title3.pack(anchor='w')

# Camera frame - ƒëi·ªÅu ch·ªânh ƒë·ªÉ c√≥ ch·ªó cho game panel
image_label = tk.Label(main_frame, bg='#D9EAF4')
image_label.place(x=50, y=150, width=640, height=430)

# Avatar canvas - ƒë·ªÉ v·∫Ω nh√¢n v·∫≠t ho·∫°t h√¨nh
avatar_canvas = tk.Canvas(main_frame, bg='#2c3e50', width=220, height=200)
avatar_canvas.place(x=710, y=350, width=220, height=200)

# Buttons frame - m·ªü r·ªông ƒë·ªÉ c√≥ th√™m n√∫t game
buttons_frame = tk.Frame(main_frame, bg='#f0f8ff')
buttons_frame.place(x=50, y=590, width=850, height=60)

# Start button
start_button = tk.Button(buttons_frame,
                         text="üé• START",
                         font=('Arial', 12, 'bold'),
                         fg='white',
                         bg='#27ae60',
                         activebackground='#2ecc71',
                         relief=tk.RAISED,
                         bd=3,
                         cursor='hand2',
                         command=use_camera)
start_button.place(x=50, y=15, width=100, height=40)

# Stop button
stop_button = tk.Button(buttons_frame, text="‚èπ STOP",
                        font=('Arial', 12, 'bold'),
                        fg='white',
                        bg='#e74c3c',
                        activebackground='#c0392b',
                        relief=tk.RAISED,
                        bd=3,
                        cursor='hand2',
                        command=cancel_feed,
                        state="disabled")
stop_button.place(x=170, y=15, width=100, height=40)

# Exit button
exit_button = tk.Button(buttons_frame, text="‚ùå EXIT",
                        font=('Arial', 12, 'bold'),
                        fg='white',
                        bg='#8e44ad',
                        activebackground='#9b59b6',
                        relief=tk.RAISED,
                        bd=3,
                        cursor='hand2',
                        command=quit_program,
                        state="normal")
exit_button.place(x=290, y=15, width=100, height=40)





# Game button
game_button = tk.Button(buttons_frame, text="ÔøΩ AVATAR",
                       font=('Arial', 12, 'bold'),
                       fg='white',
                       bg='#e67e22',
                       activebackground='#d35400',
                       relief=tk.RAISED,
                       bd=3,
                       cursor='hand2',
                       command=start_avatar_game)
game_button.place(x=420, y=15, width=100, height=40)

# Game info panel - hi·ªÉn th·ªã th√¥ng tin game (thu nh·ªè ƒë·ªÉ c√≥ ch·ªó cho canvas)
game_info_frame = tk.Frame(main_frame, bg='#2c3e50', relief=tk.RAISED, bd=2)
game_info_frame.place(x=710, y=150, width=220, height=190)

game_info_title = tk.Label(game_info_frame,
                          text="ÔøΩ AVATAR ZONE",
                          font=("Segoe UI", 14, "bold"),
                          fg="#f39c12",
                          bg='#2c3e50')
game_info_title.pack(pady=10)

game_info_label = tk.Label(game_info_frame,
                          text="ÔøΩ B·∫•m AVATAR ƒë·ªÉ b·∫Øt ƒë·∫ßu ch∆°i!",
                          font=("Segoe UI", 10),
                          fg="#ecf0f1",
                          bg='#2c3e50',
                          wraplength=180,
                          justify='left')
game_info_label.pack(pady=10, padx=10, fill='both', expand=True)

# H∆∞·ªõng d·∫´n game
game_rules = tk.Label(game_info_frame,
                     text="""üé≠ C√ÅCH CH∆†I:
‚Ä¢ Th·ªÉ hi·ªán c·∫£m x√∫c tr∆∞·ªõc camera
‚Ä¢ Nh√¢n v·∫≠t s·∫Ω ph·∫£n ·ª©ng theo
‚Ä¢ C·∫£m x√∫c m·∫°nh ‚Üí ph·∫£n ·ª©ng m·∫°nh
‚Ä¢ Th·ª≠ c√°c c·∫£m x√∫c kh√°c nhau!

üòä C·∫¢M X√öC:
üòä Happy ‚Üí Vui v·∫ª nh·∫£y m√∫a
üò¢ Sad ‚Üí Bu·ªìn b√£ c√∫i ƒë·∫ßu
üò† Angry ‚Üí N·ªïi gi·∫≠n ƒë·ªè m·∫∑t
üò≤ Surprised ‚Üí Gi·∫≠t m√¨nh
üòê Neutral ‚Üí B√¨nh th∆∞·ªùng""",
                     font=("Segoe UI", 8),
                     fg="#bdc3c7",
                     bg='#2c3e50',
                     justify='left')
game_rules.pack(pady=10, padx=10)


root.mainloop()

# Note: Models are already loaded from existing .h5 files
# No need to save them again here
print("Application finished!")